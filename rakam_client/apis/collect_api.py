# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CollectApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def batch_events(self, **kwargs):
        """
        Collect multiple events
        Returns 1 if the events are collected.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.batch_events(event_list=event_list_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventList event_list:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.batch_events_with_http_info(**kwargs)
        else:
            (data) = self.batch_events_with_http_info(**kwargs)
            return data

    def batch_events_with_http_info(self, **kwargs):
        """
        Collect multiple events
        Returns 1 if the events are collected.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.batch_events_with_http_info(event_list=event_list_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventList event_list:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_list' is set
        if ('event_list' not in params) or (params['event_list'] is None):
            raise ValueError("Missing the required parameter `event_list` when calling `batch_events`")

        resource_path = '/event/batch'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_list' in params:
            body_params = params['event_list']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='int',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def bulk_events(self, **kwargs):
        """
        Collect Bulk events
        Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set 'collection' and 'master_key' query parameters if the content-type is not application/json.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_events(event_list=event_list_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventList event_list:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bulk_events_with_http_info(**kwargs)
        else:
            (data) = self.bulk_events_with_http_info(**kwargs)
            return data

    def bulk_events_with_http_info(self, **kwargs):
        """
        Collect Bulk events
        Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set 'collection' and 'master_key' query parameters if the content-type is not application/json.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_events_with_http_info(event_list=event_list_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventList event_list:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_list' is set
        if ('event_list' not in params) or (params['event_list'] is None):
            raise ValueError("Missing the required parameter `event_list` when calling `bulk_events`")

        resource_path = '/event/bulk'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_list' in params:
            body_params = params['event_list']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def bulk_events_remote(self, **kwargs):
        """
        Collect bulk events from remote
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_events_remote(bulk_event_remote=bulk_event_remote_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BulkEventRemote bulk_event_remote:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bulk_events_remote_with_http_info(**kwargs)
        else:
            (data) = self.bulk_events_remote_with_http_info(**kwargs)
            return data

    def bulk_events_remote_with_http_info(self, **kwargs):
        """
        Collect bulk events from remote
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_events_remote_with_http_info(bulk_event_remote=bulk_event_remote_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BulkEventRemote bulk_event_remote:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_event_remote']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_events_remote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_event_remote' is set
        if ('bulk_event_remote' not in params) or (params['bulk_event_remote'] is None):
            raise ValueError("Missing the required parameter `bulk_event_remote` when calling `bulk_events_remote`")

        resource_path = '/event/bulk/remote'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_event_remote' in params:
            body_params = params['bulk_event_remote']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='int',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def collect_event(self, **kwargs):
        """
        Collect event
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collect_event(event=event_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Event event:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.collect_event_with_http_info(**kwargs)
        else:
            (data) = self.collect_event_with_http_info(**kwargs)
            return data

    def collect_event_with_http_info(self, **kwargs):
        """
        Collect event
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.collect_event_with_http_info(event=event_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Event event:  (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event' is set
        if ('event' not in params) or (params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `collect_event`")

        resource_path = '/event/collect'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event' in params:
            body_params = params['event']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='int',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def commit_bulk_events(self, **kwargs):
        """
        Commit Bulk events
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commit_bulk_events(commit_bulk_events=commit_bulk_events_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommitBulkEvents commit_bulk_events:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.commit_bulk_events_with_http_info(**kwargs)
        else:
            (data) = self.commit_bulk_events_with_http_info(**kwargs)
            return data

    def commit_bulk_events_with_http_info(self, **kwargs):
        """
        Commit Bulk events
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.commit_bulk_events_with_http_info(commit_bulk_events=commit_bulk_events_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CommitBulkEvents commit_bulk_events:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['commit_bulk_events']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_bulk_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'commit_bulk_events' is set
        if ('commit_bulk_events' not in params) or (params['commit_bulk_events'] is None):
            raise ValueError("Missing the required parameter `commit_bulk_events` when calling `commit_bulk_events`")

        resource_path = '/event/bulk/commit'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'commit_bulk_events' in params:
            body_params = params['commit_bulk_events']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['master_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
