# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ContinuousqueryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_query(self, **kwargs):
        """
        Create stream
        Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_query(continuous_query=continuous_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQuery continuous_query:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_query_with_http_info(**kwargs)
        else:
            (data) = self.create_query_with_http_info(**kwargs)
            return data

    def create_query_with_http_info(self, **kwargs):
        """
        Create stream
        Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_query_with_http_info(continuous_query=continuous_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQuery continuous_query:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuous_query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'continuous_query' is set
        if ('continuous_query' not in params) or (params['continuous_query'] is None):
            raise ValueError("Missing the required parameter `continuous_query` when calling `create_query`")

        resource_path = '/continuous-query/create'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'continuous_query' in params:
            body_params = params['continuous_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['master_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_query(self, **kwargs):
        """
        Delete stream
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_query(continuous_query_delete_query=continuous_query_delete_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryDeleteQuery continuous_query_delete_query:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_query_with_http_info(**kwargs)
        else:
            (data) = self.delete_query_with_http_info(**kwargs)
            return data

    def delete_query_with_http_info(self, **kwargs):
        """
        Delete stream
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_query_with_http_info(continuous_query_delete_query=continuous_query_delete_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryDeleteQuery continuous_query_delete_query:  (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuous_query_delete_query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'continuous_query_delete_query' is set
        if ('continuous_query_delete_query' not in params) or (params['continuous_query_delete_query'] is None):
            raise ValueError("Missing the required parameter `continuous_query_delete_query` when calling `delete_query`")

        resource_path = '/continuous-query/delete'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'continuous_query_delete_query' in params:
            body_params = params['continuous_query_delete_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['master_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SuccessMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_query(self, **kwargs):
        """
        Get continuous query
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_query(continuous_query_get_query=continuous_query_get_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryGetQuery continuous_query_get_query:  (required)
        :return: ContinuousQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_query_with_http_info(**kwargs)
        else:
            (data) = self.get_query_with_http_info(**kwargs)
            return data

    def get_query_with_http_info(self, **kwargs):
        """
        Get continuous query
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_query_with_http_info(continuous_query_get_query=continuous_query_get_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryGetQuery continuous_query_get_query:  (required)
        :return: ContinuousQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuous_query_get_query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'continuous_query_get_query' is set
        if ('continuous_query_get_query' not in params) or (params['continuous_query_get_query'] is None):
            raise ValueError("Missing the required parameter `continuous_query_get_query` when calling `get_query`")

        resource_path = '/continuous-query/get'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'continuous_query_get_query' in params:
            body_params = params['continuous_query_get_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['read_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ContinuousQuery',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_schema_of_query(self, **kwargs):
        """
        Get query schema
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_schema_of_query(continuous_query_get_schema_of_query=continuous_query_get_schema_of_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryGetSchemaOfQuery continuous_query_get_schema_of_query:  (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_schema_of_query_with_http_info(**kwargs)
        else:
            (data) = self.get_schema_of_query_with_http_info(**kwargs)
            return data

    def get_schema_of_query_with_http_info(self, **kwargs):
        """
        Get query schema
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_schema_of_query_with_http_info(continuous_query_get_schema_of_query=continuous_query_get_schema_of_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryGetSchemaOfQuery continuous_query_get_schema_of_query:  (required)
        :return: list[Collection]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuous_query_get_schema_of_query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_of_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'continuous_query_get_schema_of_query' is set
        if ('continuous_query_get_schema_of_query' not in params) or (params['continuous_query_get_schema_of_query'] is None):
            raise ValueError("Missing the required parameter `continuous_query_get_schema_of_query` when calling `get_schema_of_query`")

        resource_path = '/continuous-query/schema'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'continuous_query_get_schema_of_query' in params:
            body_params = params['continuous_query_get_schema_of_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['read_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Collection]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_queries(self, **kwargs):
        """
        List queries
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_queries(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[ContinuousQuery]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_queries_with_http_info(**kwargs)
        else:
            (data) = self.list_queries_with_http_info(**kwargs)
            return data

    def list_queries_with_http_info(self, **kwargs):
        """
        List queries
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_queries_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[ContinuousQuery]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_queries" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/continuous-query/list'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['read_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ContinuousQuery]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def test_query(self, **kwargs):
        """
        Test continuous query
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.test_query(continuous_query_test_query=continuous_query_test_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryTestQuery continuous_query_test_query:  (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.test_query_with_http_info(**kwargs)
        else:
            (data) = self.test_query_with_http_info(**kwargs)
            return data

    def test_query_with_http_info(self, **kwargs):
        """
        Test continuous query
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.test_query_with_http_info(continuous_query_test_query=continuous_query_test_query_value, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ContinuousQueryTestQuery continuous_query_test_query:  (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['continuous_query_test_query']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'continuous_query_test_query' is set
        if ('continuous_query_test_query' not in params) or (params['continuous_query_test_query'] is None):
            raise ValueError("Missing the required parameter `continuous_query_test_query` when calling `test_query`")

        resource_path = '/continuous-query/test'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'continuous_query_test_query' in params:
            body_params = params['continuous_query_test_query']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['read_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
