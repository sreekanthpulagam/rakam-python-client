# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SchemaField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, type=None, unique=False, descriptive_name=None, description=None, category=None):
        """
        SchemaField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'type': 'str',
            'unique': 'bool',
            'descriptive_name': 'str',
            'description': 'str',
            'category': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'unique': 'unique',
            'descriptive_name': 'descriptiveName',
            'description': 'description',
            'category': 'category'
        }

        self._name = name
        self._type = type
        self._unique = unique
        self._descriptive_name = descriptive_name
        self._description = description
        self._category = category

    @property
    def name(self):
        """
        Gets the name of this SchemaField.


        :return: The name of this SchemaField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SchemaField.


        :param name: The name of this SchemaField.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this SchemaField.


        :return: The type of this SchemaField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SchemaField.


        :param type: The type of this SchemaField.
        :type: str
        """
        allowed_values = ["STRING", "INTEGER", "DECIMAL", "DOUBLE", "LONG", "BOOLEAN", "DATE", "TIME", "TIMESTAMP", "BINARY", "ARRAY_STRING", "ARRAY_INTEGER", "ARRAY_DECIMAL", "ARRAY_DOUBLE", "ARRAY_LONG", "ARRAY_BOOLEAN", "ARRAY_DATE", "ARRAY_TIME", "ARRAY_TIMESTAMP", "ARRAY_BINARY", "MAP_STRING", "MAP_INTEGER", "MAP_DECIMAL", "MAP_DOUBLE", "MAP_LONG", "MAP_BOOLEAN", "MAP_DATE", "MAP_TIME", "MAP_TIMESTAMP", "MAP_BINARY"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unique(self):
        """
        Gets the unique of this SchemaField.


        :return: The unique of this SchemaField.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """
        Sets the unique of this SchemaField.


        :param unique: The unique of this SchemaField.
        :type: bool
        """

        self._unique = unique

    @property
    def descriptive_name(self):
        """
        Gets the descriptive_name of this SchemaField.


        :return: The descriptive_name of this SchemaField.
        :rtype: str
        """
        return self._descriptive_name

    @descriptive_name.setter
    def descriptive_name(self, descriptive_name):
        """
        Sets the descriptive_name of this SchemaField.


        :param descriptive_name: The descriptive_name of this SchemaField.
        :type: str
        """

        self._descriptive_name = descriptive_name

    @property
    def description(self):
        """
        Gets the description of this SchemaField.


        :return: The description of this SchemaField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SchemaField.


        :param description: The description of this SchemaField.
        :type: str
        """

        self._description = description

    @property
    def category(self):
        """
        Gets the category of this SchemaField.


        :return: The category of this SchemaField.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this SchemaField.


        :param category: The category of this SchemaField.
        :type: str
        """

        self._category = category

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
