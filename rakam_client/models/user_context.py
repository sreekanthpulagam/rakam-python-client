# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserContext(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, api_key=None, library=None, upload_time=None, checksum=None):
        """
        UserContext - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'api_key': 'str',
            'library': 'Library',
            'upload_time': 'int',
            'checksum': 'str'
        }

        self.attribute_map = {
            'api_key': 'api_key',
            'library': 'library',
            'upload_time': 'upload_time',
            'checksum': 'checksum'
        }

        self._api_key = api_key
        self._library = library
        self._upload_time = upload_time
        self._checksum = checksum

    @property
    def api_key(self):
        """
        Gets the api_key of this UserContext.


        :return: The api_key of this UserContext.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """
        Sets the api_key of this UserContext.


        :param api_key: The api_key of this UserContext.
        :type: str
        """

        self._api_key = api_key

    @property
    def library(self):
        """
        Gets the library of this UserContext.


        :return: The library of this UserContext.
        :rtype: Library
        """
        return self._library

    @library.setter
    def library(self, library):
        """
        Sets the library of this UserContext.


        :param library: The library of this UserContext.
        :type: Library
        """

        self._library = library

    @property
    def upload_time(self):
        """
        Gets the upload_time of this UserContext.


        :return: The upload_time of this UserContext.
        :rtype: int
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """
        Sets the upload_time of this UserContext.


        :param upload_time: The upload_time of this UserContext.
        :type: int
        """

        self._upload_time = upload_time

    @property
    def checksum(self):
        """
        Gets the checksum of this UserContext.


        :return: The checksum of this UserContext.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """
        Sets the checksum of this UserContext.


        :param checksum: The checksum of this UserContext.
        :type: str
        """

        self._checksum = checksum

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
