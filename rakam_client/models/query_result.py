# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QueryResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, metadata=None, result=None, error=None, properties=None, failed=False):
        """
        QueryResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metadata': 'list[SchemaField]',
            'result': 'list[list[object]]',
            'error': 'QueryError',
            'properties': 'dict(str, object)',
            'failed': 'bool'
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'result': 'result',
            'error': 'error',
            'properties': 'properties',
            'failed': 'failed'
        }

        self._metadata = metadata
        self._result = result
        self._error = error
        self._properties = properties
        self._failed = failed

    @property
    def metadata(self):
        """
        Gets the metadata of this QueryResult.


        :return: The metadata of this QueryResult.
        :rtype: list[SchemaField]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this QueryResult.


        :param metadata: The metadata of this QueryResult.
        :type: list[SchemaField]
        """

        self._metadata = metadata

    @property
    def result(self):
        """
        Gets the result of this QueryResult.
        Each row is an array that contains the values for the columns that are defined in metadata property.

        :return: The result of this QueryResult.
        :rtype: list[list[object]]
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this QueryResult.
        Each row is an array that contains the values for the columns that are defined in metadata property.

        :param result: The result of this QueryResult.
        :type: list[list[object]]
        """

        self._result = result

    @property
    def error(self):
        """
        Gets the error of this QueryResult.


        :return: The error of this QueryResult.
        :rtype: QueryError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this QueryResult.


        :param error: The error of this QueryResult.
        :type: QueryError
        """

        self._error = error

    @property
    def properties(self):
        """
        Gets the properties of this QueryResult.


        :return: The properties of this QueryResult.
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this QueryResult.


        :param properties: The properties of this QueryResult.
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def failed(self):
        """
        Gets the failed of this QueryResult.


        :return: The failed of this QueryResult.
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """
        Sets the failed of this QueryResult.


        :param failed: The failed of this QueryResult.
        :type: bool
        """

        self._failed = failed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
