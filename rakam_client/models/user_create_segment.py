# coding: utf-8

"""
    Rakam API Documentation

    An analytics platform API that lets you create your own analytics services.

    OpenAPI spec version: 0.5
    Contact: contact@rakam.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserCreateSegment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, table_name=None, filter_expression=None, event_filters=None, cache_eviction=None):
        """
        UserCreateSegment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'table_name': 'str',
            'filter_expression': 'str',
            'event_filters': 'list[EventFilter]',
            'cache_eviction': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'table_name': 'table_name',
            'filter_expression': 'filter_expression',
            'event_filters': 'event_filters',
            'cache_eviction': 'cache_eviction'
        }

        self._name = name
        self._table_name = table_name
        self._filter_expression = filter_expression
        self._event_filters = event_filters
        self._cache_eviction = cache_eviction

    @property
    def name(self):
        """
        Gets the name of this UserCreateSegment.


        :return: The name of this UserCreateSegment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserCreateSegment.


        :param name: The name of this UserCreateSegment.
        :type: str
        """

        self._name = name

    @property
    def table_name(self):
        """
        Gets the table_name of this UserCreateSegment.


        :return: The table_name of this UserCreateSegment.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """
        Sets the table_name of this UserCreateSegment.


        :param table_name: The table_name of this UserCreateSegment.
        :type: str
        """

        self._table_name = table_name

    @property
    def filter_expression(self):
        """
        Gets the filter_expression of this UserCreateSegment.


        :return: The filter_expression of this UserCreateSegment.
        :rtype: str
        """
        return self._filter_expression

    @filter_expression.setter
    def filter_expression(self, filter_expression):
        """
        Sets the filter_expression of this UserCreateSegment.


        :param filter_expression: The filter_expression of this UserCreateSegment.
        :type: str
        """

        self._filter_expression = filter_expression

    @property
    def event_filters(self):
        """
        Gets the event_filters of this UserCreateSegment.


        :return: The event_filters of this UserCreateSegment.
        :rtype: list[EventFilter]
        """
        return self._event_filters

    @event_filters.setter
    def event_filters(self, event_filters):
        """
        Sets the event_filters of this UserCreateSegment.


        :param event_filters: The event_filters of this UserCreateSegment.
        :type: list[EventFilter]
        """

        self._event_filters = event_filters

    @property
    def cache_eviction(self):
        """
        Gets the cache_eviction of this UserCreateSegment.


        :return: The cache_eviction of this UserCreateSegment.
        :rtype: str
        """
        return self._cache_eviction

    @cache_eviction.setter
    def cache_eviction(self, cache_eviction):
        """
        Sets the cache_eviction of this UserCreateSegment.


        :param cache_eviction: The cache_eviction of this UserCreateSegment.
        :type: str
        """

        self._cache_eviction = cache_eviction

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
